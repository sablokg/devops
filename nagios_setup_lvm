#/dev/sda = disk 
#/dev/vdb1= phsical drive
#/dev/vdb2= physical drive
#storage= volume_group
#storage_lvm = lvm
#$USER = gaurav
#$group = group

# understand the concept of the block device: block device provide the persistent storage across your system and can be used as RAID5 or the SSD.

# Getting the UUID of the block devide: UUID is the specific ID of the block device which you can use to map the 

############################
 # Installing the packages required for the setting up of the disk to the VM
$ sudo apt-get install lvm 
$ sudo apt-get install lvm

# Formatting the disk and enabling it for the attachment 
$ sudo fdisk /dev/sda
# After formatting the disk partition information can be retrieved by 
$ sudo partprobe

### creating a physical drive 
$ sudo pvcreate /dev/vdb
$ sudo pvcreate /dev/vdb
$ sudo pvs or pvsdisplay # checking the creating physical drive

### creating a volume group 
$ sudo vgcreate storage /dev/vdb /dev/vdc

### creating a lvm 
$ sudo lvcreate -n storage_lvm -l 100%FREE dba_storage #(-l defines the size of the volume to be created, you can define 10G to create a VM of 10G)
$ sudo lvcreate -n storage2_lvm --size 10G #(creating an lvm with a specific size)
$ sudo lvs or lvsdisplay # checking the created lvm

### formatting the file system: formatting using the ext3 or the xfs
mkfs.ext3 /dev/storage/dev/storage_lvm
mkfs.xfs /dev/storage/dev/storage_lvm

### creating a group
$ sudo groupadd system_users 

#### adding a user to the group 
$ sudo usermod -a -G system_users user

#### formatting and binding the partition to the mount point 
$ lsblk --fs dba_storage
create a mount point 
mkdir --parents mount-point
#creating an user in the linux environment after the disk installation and mounting 

$ sudo useradd gaurav # adding a user without the home directory 
$ sudo useradd -m gaurav # adding a user with the home directory 
$ sudo passwd gaurav # assigning a password to the user
$ sudo useradd -m gaurav -p passwd  # passing all the arguments in one line
$ sudo usermod -L gaurav # locking the user
$ sudo groupadd group # adding a group to the created lvm 
$ sudo usermod -a -G gaurav group # adding gaurav to the group 
$ cat group /etc/group # checking the group list

# Installing the Nagios 

# Install the dependencies

$ sudo apt-get install -y gcc glibc glibc-common perl httpd php wget gd gd-devel
$ sudo apt-get install -y gcc glibc glibc-common make gettext automake autoconf wget openssl-devel net-snmp net-snmp-utils
$ systemctl start httpd 
$ systemctl enable httpd
   
# Installing the Nagios and adding a user to the Nagios
https://assets.nagios.com/downloads/nagioscore/versions.php

$ wget -O nagioscore.tar.gz https://github.com/NagiosEnterprises/nagioscore/archive/nagios-4.4.8.tar.gz
   tar xzf nagioscore.tar.gz
   cd nagioscore-nagios-4.4.8/
$ ./configure
$ make all
$ make install-groups-users finishing the installation of the nagios with the defined user group. 
$ usermod -a -G nagios apache
$ make install
$ make install-daemoninit
$ htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin enabling the httpd
$ make install-commandmode		
$ make install-config			  
$ make install-webconf

# Check the configuration file 

cd /etc/apache2
apachectl configtest

# Installing the Nagios plugins:         

$ wget --no-check-certificate -O nagios-plugins.tar.gz https://github.com/nagios-plugins/nagios-plugins/releases/download/release-2.4.1/nagios-plugins-2.4.1.tar.gz 
$ tar zxf nagios-plugins.tar.gz
$ cd nagios-plugins-release-2.2.1/
$ ./tools/setup
$ ./configure
$ make
$ make install

# If you are downloading it from CPAN: https://metacpan.org/dist/Nagios-Monitoring-Plugin

$ perl -MCPAN -e shell
$ cpan install module
$ perl -MCPAN -e 'install Nagios::Monitoring::Plugin'
Nagios::Monitoring::Plugin	A family of perl modules to streamline writing Nagios plugins
Nagios::Monitoring::Plugin::Config	read nagios plugin .ini style config files
Nagios::Monitoring::Plugin::ExitResult	Helper class for returning both output and return codes when testing.
Nagios::Monitoring::Plugin::Functions	functions to simplify the creation of Nagios plugins
Nagios::Monitoring::Plugin::Getopt	OO perl module providing standardised argument processing for Nagios plugins
Nagios::Monitoring::Plugin::Performance	class for handling Nagios::Monitoring::Plugin performance data.
Nagios::Monitoring::Plugin::Range	class for handling Nagios::Monitoring::Plugin range data.
Nagios::Monitoring::Plugin::Threshold	class for handling Nagios::Monitoring::Plugin thresholds.

# Restarting the system and the nagios service

$ systemctl restart httpd.service
$ systemctl start nagios.service
$ systemctl start nagios.service
$ systemctl start nagios.service
start nagios service
nagios service status 

# Two ways to start firewall, either in the system enabled or the cloud enabled. 

firewall-cmd --permanent --zone=public --add-port=80/tcp
firewall-cmd --reload
or 

# google cloud enabled 

$gcloud compute --project=projectname firewall-rules create firewall-8080 --direction=INGRESS --priority=1000 --network=default --action=ALLOW --rules=tcp:8080 --source-ranges=0.0.0.0/0

# Check the Nagios on http://localhost/nagios or http://externalip/nagios







