# This repository is for git devops and it will put all the git devops for the DevOPS. 

# All the exercises are performed on GPC : Coogle Cloud Computing and will add AWS and Azure also. 

# sablokg@slave2:~$ uname -a 
# Linux slave2 5.4.0-1092-gcp #101~18.04.1-Ubuntu SMP Mon Oct 17 18:29:06 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux


# 1. Version Control also called a Scource code management is the process of the maintaining the version control of the software. It simply describs the flow of the version of the software or the source code developed and the stages that it went through the development. Why it was devloped, imagine a scenario, in which you are writing some code with your collabroator, he knows some part of it and you know some part of it, you dont know which part has already been completed and which part needs to be written. 

# 2. Maintaining such communications through email, will be a cumbersome task as that is difficult to follow, not trackable as what and when happen, which eventually lead to the development of the first control version management system: SCCS (Source Code Control System) established by Marc Rochkind in 1972. 

# 3. Git was developed by Linus Torvalds as distributed version control, meaning of the distributed version control is that you dont have the access to the same code at the same time by multiple developer but you can clone each source of the code written by each developer and see what changes are made through the tag commit. Commit refers to the changes that are made in the code and can be continously updated by each developer for its source code. 
  Advantages ---> Fast operation, Local changes, No network needed  
  
# Git panel layout
    ---> Local --> Working directory, Stagging and Local Repository
        ----> Working directory (Local directory where you are writing the code) 
        ----> Stagging (Checking the code before pushing it to the final version, untill you commit, it will be a stagging are and if you still make changes, it will be unstagged)
        ---->  Commit means making the local repository available for the final version. It means you have approved the final changes for release.
        ----> Local repository is the repository where you have saved the final version of the code and once you push it, it will be updated to the remote repository. 
        ----> Git follows a stagging startegy called as snapshots. Your code while you are in working directory and local repository will be the stage 1 of the snapshot, if you commit it to the remote repository. Now if you keep on making changes and keep commiting to the same file then it is will snapshot (n) times based on the times, you make the commit to the file. 

# Basic setup in Linux and emulating git: 

1. Install git: $ sudo apt-get update && sudo apt-get install git > 1.out & 2 >out.err
2. Install git from the source code
$ sudo apt-get update
$ sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev asciidoc xmlto docbook2x
$ git clone https://git.kernel.org/pub/scm/git/git.git
$ make all doc info prefix=/usr
$ sudo make install install-doc install-html install-info install-man prefix=/usr

sablokg@instance-1:~$ git --version 
git version 2.17.1

2. sablokg@instance-1:~$ git config 
usage: git config [<options>]

# Config file location
    --global              use global config file # Location of the glocabl config 
    --system              use system config file # Location of the system config 
    --local               use repository config file # Location of the local config
    -f, --file <file>     use given config file
    --blob <blob-id>      read config from given blob object

    In linux the config file is located under the ~/.gitconfig 

# adding a user to the git: $ git config --global user.name $username && git config --global user.email $useremail. You can define this in the bash if you have multiple username and password to be defined or you can write a yaml for it in case you are using ansible. 

 !/bin/sh (shebang)
 username = username
 useremail = useremail

# writing a yaml for the git installation 

---  # Start of the yaml for the git installation 
-                        # List of sequences 
  become: true
  hosts: slave
  name: play1
- 
  name: "git install" # key: value pair mapping 
- 
  commands: "apt-get install git"
...

3. The config command is to list all the configurations in the git, you can see below that the user.email is reflecting the useremail added and the user.name is reflecting the username added. 

sablokg@instance-1:~$ git config --list 
   user.email=sablokg@gmail.com
   user.name=sablokg
   core.repositoryformatversion=0
   core.filemode=true
   core.bare=false
   core.logallrefupdates=true

4. Now if you want to see the origin of the file in the config then you can list them like: 

sablokg@instance-1:~$ git config --list --show-origin
file:/home/sablokg/.gitconfig   user.email=sablokg@gmail.com
file:/home/sablokg/.gitconfig   user.name=sablokg
file:.git/config        core.repositoryformatversion=0
file:.git/config        core.filemode=true
file:.git/config        core.bare=false
file:.git/config        core.logallrefupdates=true

5. Now lets run the git, check the commands below: 

sablokg@instance-1:~$ mkdir gittest # Making an git directory 
sablokg@instance-1:~$ cd gittest # changing the directory to gittest
sablokg@instance-1:~/gittest$ git init # initialising a git with in the directory to start making a working directory
Initialized empty Git repository in /home/sablokg/gittest/.git/
sablokg@instance-1:~/gittest$ cd .git # changing into the hidden intitialized git directory 
sablokg@instance-1:~/gittest/.git$ ls -la # listing all the directory and the hidden files, which includes configs
total 40
drwxrwxr-x 7 sablokg sablokg 4096 Oct 26 05:40 .
drwxrwxr-x 3 sablokg sablokg 4096 Oct 26 05:40 ..
-rw-rw-r-- 1 sablokg sablokg   23 Oct 26 05:40 HEAD # reference to the current branch
drwxrwxr-x 2 sablokg sablokg 4096 Oct 26 05:40 branches
-rw-rw-r-- 1 sablokg sablokg   92 Oct 26 05:40 config # contains configuration 
-rw-rw-r-- 1 sablokg sablokg   73 Oct 26 05:40 description # contains description 
drwxrwxr-x 2 sablokg sablokg 4096 Oct 26 05:40 hooks
drwxrwxr-x 2 sablokg sablokg 4096 Oct 26 05:40 info
drwxrwxr-x 4 sablokg sablokg 4096 Oct 26 05:40 objects
drwxrwxr-x 4 sablokg sablokg 4096 Oct 26 05:40 refs

6. Starting the commit to the git: 

sablokg@instance-1:~/gittest$ echo "i am starting git" >> git.txt echoing the text in bash and storing the file to the txt

sablokg@instance-1:~/gittest$ git add git.txt # adding the txt file to the git

sablokg@instance-1:~/gittest$ git commit -m "inital commit: starting git" # commiting the change to the git, see the " " here, as if you will use '' it will not pass, " " allows for the text in the spaces to be taken into account. without the commit: value key pair it will not commit. 
[master (root-commit) 787e17a] inital commit: starting git
 1 file changed, 1 insertion(+)
 create mode 100644 git.txt








 
 